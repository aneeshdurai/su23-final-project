{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/CheckboxAndroid.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nvar CheckboxAndroid = function (_React$Component) {\n  _inherits(CheckboxAndroid, _React$Component);\n  function CheckboxAndroid() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, CheckboxAndroid);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CheckboxAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      scaleAnim: new Animated.Value(1)\n    };\n    return _this;\n  }\n  _createClass(CheckboxAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n      var checked = this.props.status === 'checked';\n      Animated.sequence([Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? 200 : 0\n      }), Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? 200 : 350\n      })]).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        status = _this$props.status,\n        disabled = _this$props.disabled,\n        onPress = _this$props.onPress,\n        theme = _this$props.theme,\n        rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, checkboxColor;\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        checkboxColor = theme.colors.disabled;\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        checkboxColor = checked ? checkedColor : uncheckedColor;\n      }\n      var borderWidth = this.state.scaleAnim.interpolate({\n        inputRange: [0.8, 1],\n        outputRange: [7, 0]\n      });\n      var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        }\n      }), React.createElement(Animated.View, {\n        style: {\n          transform: [{\n            scale: this.state.scaleAnim\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        }\n      }, React.createElement(Icon, {\n        allowFontScaling: false,\n        source: icon,\n        size: 24,\n        color: checkboxColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        }\n      }), React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.fillContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.fill, {\n          borderColor: checkboxColor\n        }, {\n          borderWidth: borderWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        }\n      }))));\n    }\n  }]);\n  return CheckboxAndroid;\n}(React.Component);\nCheckboxAndroid.displayName = 'Checkbox.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid);\nexport { CheckboxAndroid };","map":{"version":3,"names":["React","Animated","View","StyleSheet","color","Icon","TouchableRipple","withTheme","CheckboxAndroid","state","scaleAnim","Value","prevProps","status","props","checked","sequence","timing","toValue","duration","start","_this$props","disabled","onPress","theme","rest","_objectWithoutProperties","indeterminate","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","createElement","_extends","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","accessibilityLiveRegion","style","styles","container","__source","fileName","_jsxFileName","lineNumber","transform","scale","allowFontScaling","source","size","absoluteFill","fillContainer","fill","borderColor","Component","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"sources":["/Users/aneesh/Desktop/cs160/su23-final-project/PickUpPals/node_modules/react-native-paper/lib/module/components/CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? 200 : 0,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? 200 : 350,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <Icon\n            allowFontScaling={false}\n            source={icon}\n            size={24}\n            color={checkboxColor}\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}