{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/List/ListItem.tsx\";\nimport color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nvar ListItem = function (_React$Component) {\n  _inherits(ListItem, _React$Component);\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListItem).apply(this, arguments));\n  }\n  _createClass(ListItem, [{\n    key: \"renderDescription\",\n    value: function renderDescription(descriptionColor, description) {\n      var _this$props = this.props,\n        descriptionEllipsizeMode = _this$props.descriptionEllipsizeMode,\n        descriptionStyle = _this$props.descriptionStyle,\n        descriptionNumberOfLines = _this$props.descriptionNumberOfLines;\n      return typeof description === 'function' ? description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize\n      }) : React.createElement(Text, {\n        numberOfLines: descriptionNumberOfLines,\n        ellipsizeMode: descriptionEllipsizeMode,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      }, description);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        left = _this$props2.left,\n        right = _this$props2.right,\n        title = _this$props2.title,\n        description = _this$props2.description,\n        onPress = _this$props2.onPress,\n        theme = _this$props2.theme,\n        style = _this$props2.style,\n        titleStyle = _this$props2.titleStyle,\n        titleNumberOfLines = _this$props2.titleNumberOfLines,\n        titleEllipsizeMode = _this$props2.titleEllipsizeMode,\n        rest = _objectWithoutProperties(_this$props2, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"titleEllipsizeMode\"]);\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        style: [styles.container, style],\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        }\n      }), React.createElement(View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        }\n      }, left ? left({\n        color: descriptionColor,\n        style: description ? styles.iconMarginLeft : _objectSpread({}, styles.iconMarginLeft, styles.marginVerticalNone)\n      }) : null, React.createElement(View, {\n        style: [styles.item, styles.content],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        }\n      }, React.createElement(Text, {\n        ellipsizeMode: titleEllipsizeMode,\n        numberOfLines: titleNumberOfLines,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        }\n      }, title), description ? this.renderDescription(descriptionColor, description) : null), right ? right({\n        color: descriptionColor,\n        style: description ? styles.iconMarginRight : _objectSpread({}, styles.iconMarginRight, styles.marginVerticalNone)\n      }) : null));\n    }\n  }]);\n  return ListItem;\n}(React.Component);\nListItem.displayName = 'List.Item';\nListItem.defaultProps = {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n};\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"names":["color","React","StyleSheet","View","TouchableRipple","Text","withTheme","ListItem","descriptionColor","description","_this$props","props","descriptionEllipsizeMode","descriptionStyle","descriptionNumberOfLines","ellipsizeMode","fontSize","styles","createElement","numberOfLines","style","__source","fileName","_jsxFileName","lineNumber","_this$props2","left","right","title","onPress","theme","titleStyle","titleNumberOfLines","titleEllipsizeMode","rest","_objectWithoutProperties","titleColor","colors","text","alpha","rgb","string","_extends","container","row","iconMarginLeft","_objectSpread","marginVerticalNone","item","content","pointerEvents","renderDescription","iconMarginRight","Component","displayName","defaultProps","create","padding","flexDirection","marginVertical","marginLeft","marginRight","paddingLeft","flex","justifyContent"],"sources":["/Users/aneesh/Desktop/cs160/su23-final-project/PickUpPals/node_modules/react-native-paper/lib/module/components/List/ListItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]} pointerEvents=\"none\">\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}