{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Appbar/AppbarHeader.tsx\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport overlay from \"../../styles/overlay\";\nimport Appbar, { DEFAULT_APPBAR_HEIGHT } from \"./Appbar\";\nimport shadow from \"../../styles/shadow\";\nimport { withTheme } from \"../../core/theming\";\nimport { APPROX_STATUSBAR_HEIGHT } from \"../../constants\";\nimport color from 'color';\nvar AppbarHeader = function (_React$Component) {\n  _inherits(AppbarHeader, _React$Component);\n  function AppbarHeader() {\n    _classCallCheck(this, AppbarHeader);\n    return _possibleConstructorReturn(this, _getPrototypeOf(AppbarHeader).apply(this, arguments));\n  }\n  _createClass(AppbarHeader, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        _this$props$statusBar = _this$props.statusBarHeight,\n        statusBarHeight = _this$props$statusBar === void 0 ? APPROX_STATUSBAR_HEIGHT : _this$props$statusBar,\n        style = _this$props.style,\n        dark = _this$props.dark,\n        rest = _objectWithoutProperties(_this$props, [\"statusBarHeight\", \"style\", \"dark\"]);\n      var _rest$theme = rest.theme,\n        isDarkTheme = _rest$theme.dark,\n        colors = _rest$theme.colors,\n        mode = _rest$theme.mode;\n      var _ref = StyleSheet.flatten(style) || {},\n        _ref$height = _ref.height,\n        height = _ref$height === void 0 ? DEFAULT_APPBAR_HEIGHT : _ref$height,\n        _ref$elevation = _ref.elevation,\n        elevation = _ref$elevation === void 0 ? 4 : _ref$elevation,\n        customBackground = _ref.backgroundColor,\n        _ref$zIndex = _ref.zIndex,\n        zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex,\n        restStyle = _objectWithoutProperties(_ref, [\"height\", \"elevation\", \"backgroundColor\", \"zIndex\"]);\n      var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n      var Wrapper = typeof this.props.statusBarHeight === 'number' ? View : SafeAreaView;\n      var isDark;\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n      }\n      StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\n      return React.createElement(Wrapper, {\n        style: [{\n          backgroundColor: backgroundColor,\n          zIndex: zIndex,\n          elevation: elevation\n        }, shadow(elevation)],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }, React.createElement(Appbar, _extends({\n        style: [{\n          height: height,\n          backgroundColor: backgroundColor,\n          marginTop: statusBarHeight\n        }, styles.appbar, restStyle],\n        dark: dark\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        }\n      })));\n    }\n  }]);\n  return AppbarHeader;\n}(React.Component);\nAppbarHeader.displayName = 'Appbar.Header';\nvar styles = StyleSheet.create({\n  appbar: {\n    elevation: 0\n  }\n});\nexport default withTheme(AppbarHeader);\nexport { AppbarHeader };","map":{"version":3,"names":["React","StyleSheet","View","SafeAreaView","StatusBar","overlay","Appbar","DEFAULT_APPBAR_HEIGHT","shadow","withTheme","APPROX_STATUSBAR_HEIGHT","color","AppbarHeader","_this$props","props","_this$props$statusBar","statusBarHeight","style","dark","rest","_objectWithoutProperties","_rest$theme","theme","isDarkTheme","colors","mode","_ref","flatten","_ref$height","height","_ref$elevation","elevation","customBackground","backgroundColor","_ref$zIndex","zIndex","restStyle","surface","primary","Wrapper","isDark","isLight","setBarStyle","createElement","__source","fileName","_jsxFileName","lineNumber","_extends","marginTop","styles","appbar","Component","displayName","create"],"sources":["/Users/aneesh/Desktop/cs160/su23-final-project/PickUpPals/node_modules/react-native-paper/lib/module/components/Appbar/AppbarHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  SafeAreaView,\n  ViewStyle,\n  StatusBar,\n} from 'react-native';\nimport overlay from '../../styles/overlay';\nimport Appbar, { DEFAULT_APPBAR_HEIGHT } from './Appbar';\nimport shadow from '../../styles/shadow';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\nimport color from 'color';\n\ntype Props = React.ComponentProps<typeof Appbar> & {\n  /**\n   * Whether the background color is a dark color. A dark header will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Extra padding to add at the top of header to account for translucent status bar.\n   * This is automatically handled on iOS >= 11 including iPhone X using `SafeAreaView`.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to disable the default behaviour, and customize the height.\n   */\n  statusBarHeight?: number;\n  /**\n   * Content of the header.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.android.png\" />\n *     <figcaption>Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-header.ios.png\" />\n *     <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   _goBack = () => console.log('Went back');\n *\n *   _onSearch = () => console.log('Searching');\n *\n *   _onMore = () => console.log('Shown more');\n *\n *   render() {\n *     return (\n *       <Appbar.Header>\n *         <Appbar.BackAction\n *           onPress={this._goBack}\n *         />\n *         <Appbar.Content\n *           title=\"Title\"\n *           subtitle=\"Subtitle\"\n *         />\n *         <Appbar.Action icon=\"search\" onPress={this._onSearch} />\n *         <Appbar.Action icon=\"more-vert\" onPress={this._onMore} />\n *       </Appbar.Header>\n *     );\n *   }\n * }\n * ```\n */\nclass AppbarHeader extends React.Component<Props> {\n  static displayName = 'Appbar.Header';\n\n  render() {\n    const {\n      // Don't use default props since we check it to know whether we should use SafeAreaView\n      statusBarHeight = APPROX_STATUSBAR_HEIGHT,\n      style,\n      dark,\n      ...rest\n    } = this.props;\n    const { dark: isDarkTheme, colors, mode } = rest.theme;\n    const {\n      height = DEFAULT_APPBAR_HEIGHT,\n      elevation = 4,\n      backgroundColor: customBackground,\n      zIndex = 0,\n      ...restStyle\n    }: ViewStyle = StyleSheet.flatten(style) || {};\n    const backgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n    // Let the user override the behaviour\n    const Wrapper =\n      typeof this.props.statusBarHeight === 'number' ? View : SafeAreaView;\n    let isDark;\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n    StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content');\n\n    return (\n      <Wrapper\n        style={\n          [\n            { backgroundColor, zIndex, elevation },\n            shadow(elevation),\n          ] as StyleProp<ViewStyle>\n        }\n      >\n        {/* $FlowFixMe: There seems to be conflict between Appbar's props and Header's props */}\n        <Appbar\n          //@ts-ignore\n          style={[\n            { height, backgroundColor, marginTop: statusBarHeight },\n            styles.appbar,\n            restStyle,\n          ]}\n          dark={dark}\n          {...rest}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(AppbarHeader);\n\n// @component-docs ignore-next-line\nexport { AppbarHeader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}