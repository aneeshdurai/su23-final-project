{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Avatar/AvatarText.tsx\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\nvar defaultSize = 64;\nvar AvatarText = function (_React$Component) {\n  _inherits(AvatarText, _React$Component);\n  function AvatarText() {\n    _classCallCheck(this, AvatarText);\n    return _possibleConstructorReturn(this, _getPrototypeOf(AvatarText).apply(this, arguments));\n  }\n  _createClass(AvatarText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        label = _this$props.label,\n        _this$props$size = _this$props.size,\n        size = _this$props$size === void 0 ? defaultSize : _this$props$size,\n        style = _this$props.style,\n        theme = _this$props.theme,\n        labelStyle = _this$props.labelStyle;\n      var _ref = StyleSheet.flatten(style) || {},\n        _ref$backgroundColor = _ref.backgroundColor,\n        backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.primary : _ref$backgroundColor,\n        restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n      var textColor = this.props.color || (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n      return React.createElement(View, {\n        style: [{\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor: backgroundColor\n        }, styles.container, restStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, React.createElement(Text, {\n        style: [styles.text, {\n          color: textColor,\n          fontSize: size / 2,\n          lineHeight: size\n        }, labelStyle],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        }\n      }, label));\n    }\n  }]);\n  return AvatarText;\n}(React.Component);\nAvatarText.displayName = 'Avatar.Text';\nAvatarText.defaultProps = {\n  size: defaultSize\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default withTheme(AvatarText);","map":{"version":3,"names":["React","View","StyleSheet","color","Text","withTheme","white","defaultSize","AvatarText","_this$props","props","label","_this$props$size","size","style","theme","labelStyle","_ref","flatten","_ref$backgroundColor","backgroundColor","colors","primary","restStyle","_objectWithoutProperties","textColor","isLight","createElement","width","height","borderRadius","styles","container","__source","fileName","_jsxFileName","lineNumber","text","fontSize","lineHeight","numberOfLines","Component","displayName","defaultProps","create","justifyContent","alignItems","textAlign","textAlignVertical"],"sources":["/Users/aneesh/Desktop/cs160/su23-final-project/PickUpPals/node_modules/react-native-paper/lib/module/components/Avatar/AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\nconst defaultSize = 64;\n\ntype Props = {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nclass AvatarText extends React.Component<Props> {\n  static displayName = 'Avatar.Text';\n\n  static defaultProps = {\n    size: defaultSize,\n  };\n\n  render() {\n    const { label, size = defaultSize, style, theme, labelStyle } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      this.props.color ||\n      (color(backgroundColor).isLight() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        <Text\n          style={[\n            styles.text,\n            {\n              color: textColor,\n              fontSize: size / 2,\n              lineHeight: size,\n            },\n            labelStyle,\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAOA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;AACA,SAASC,SAAT;AACA,SAASC,KAAT;AAGA,IAAMC,WAAW,GAAG,EAApB;IAgDMC,U;;;;;;;;6BAOK;MAAA,IAAAC,WAAA,GACyD,KAAKC,KAD9D;QACCC,KADD,GAAAF,WAAA,CACCE,KADD;QAAAC,gBAAA,GAAAH,WAAA,CACQI,IADR;QACQA,IADR,GAAAD,gBAAA,cACeL,WADf,GAAAK,gBAAA;QAC4BE,KAD5B,GAAAL,WAAA,CAC4BK,KAD5B;QACmCC,KADnC,GAAAN,WAAA,CACmCM,KADnC;QAC0CC,UAD1C,GAAAP,WAAA,CAC0CO,UAD1C;MAAA,IAAAC,IAAA,GAILf,UAAU,CAACgB,OAAX,CAAmBJ,KAAnB,KAA6B,EAJxB;QAAAK,oBAAA,GAAAF,IAAA,CAGCG,eAHD;QAGCA,eAHD,GAAAD,oBAAA,cAGmBJ,KAAK,CAACM,MAAN,CAAaC,OAHhC,GAAAH,oBAAA;QAG4CI,SAH5C,GAAAC,wBAAA,CAAAP,IAAA;MAKP,IAAMQ,SAAS,GACb,KAAKf,KAAL,CAAWP,KAAX,KACCA,KAAK,CAACiB,eAAD,CAAL,CAAuBM,OAAvB,KAAmC,oBAAnC,GAA0DpB,KAD3D,CADF;MAIA,OACEN,KAAA,CAAA2B,aAAA,CAAC1B,IAAD;QACEa,KAAK,EAAE,CACL;UACEc,KAAK,EAAEf,IADT;UAEEgB,MAAM,EAAEhB,IAFV;UAGEiB,YAAY,EAAEjB,IAAI,GAAG,CAHvB;UAIEO,eAAe,EAAfA;QAJF,CADK,EAOLW,MAAM,CAACC,SAPF,EAQLT,SARK,CADT;QAAAU,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;QAAA;MAAA,GAYEpC,KAAA,CAAA2B,aAAA,CAACvB,IAAD;QACEU,KAAK,EAAE,CACLiB,MAAM,CAACM,IADF,EAEL;UACElC,KAAK,EAAEsB,SADT;UAEEa,QAAQ,EAAEzB,IAAI,GAAG,CAFnB;UAGE0B,UAAU,EAAE1B;QAHd,CAFK,EAOLG,UAPK,CADT;QAUEwB,aAAa,EAAE,CAVjB;QAAAP,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;QAAA;MAAA,GAYGzB,KAZH,CAZF,CADF;IA6BD;;;EA7CsBX,KAAK,CAACyC,S;AAAzBjC,U,CACGkC,W,GAAc,a;AADjBlC,U,CAGGmC,Y,GAAe;EACpB9B,IAAI,EAAEN;AADc,C;AA6CxB,IAAMwB,MAAM,GAAG7B,UAAU,CAAC0C,MAAX,CAAkB;EAC/BZ,SAAS,EAAE;IACTa,cAAc,EAAE,QADP;IAETC,UAAU,EAAE;EAFH,CADoB;EAK/BT,IAAI,EAAE;IACJU,SAAS,EAAE,QADP;IAEJC,iBAAiB,EAAE;EAFf;AALyB,CAAlB,CAAf;AAWA,eAAe3C,SAAS,CAACG,UAAD,CAAxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}