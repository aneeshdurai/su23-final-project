{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/trensik/dev/react-native-paper/src/components/Divider.tsx\";\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\nvar Divider = function (_React$Component) {\n  _inherits(Divider, _React$Component);\n  function Divider() {\n    _classCallCheck(this, Divider);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Divider).apply(this, arguments));\n  }\n  _createClass(Divider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        inset = _this$props.inset,\n        style = _this$props.style,\n        theme = _this$props.theme,\n        rest = _objectWithoutProperties(_this$props, [\"inset\", \"style\", \"theme\"]);\n      var isDarkTheme = theme.dark;\n      return React.createElement(View, _extends({}, rest, {\n        style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        }\n      }));\n    }\n  }]);\n  return Divider;\n}(React.Component);\nvar styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\nexport default withTheme(Divider);","map":{"version":3,"names":["React","color","StyleSheet","View","withTheme","black","white","Divider","_this$props","props","inset","style","theme","rest","_objectWithoutProperties","isDarkTheme","dark","createElement","_extends","styles","light","__source","fileName","_jsxFileName","lineNumber","Component","create","backgroundColor","alpha","rgb","string","height","hairlineWidth","marginLeft"],"sources":["/Users/aneesh/Desktop/cs160/su23-final-project/PickUpPals/node_modules/react-native-paper/lib/module/components/Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Divider extends React.Component<Props> {\n  render() {\n    const { inset, style, theme, ...rest } = this.props;\n    const { dark: isDarkTheme } = theme;\n    return (\n      <View\n        {...rest}\n        style={[\n          isDarkTheme ? styles.dark : styles.light,\n          inset && styles.inset,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white)\n      .alpha(0.12)\n      .rgb()\n      .string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AACA,SAASC,SAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;IAoCMC,O;;;;;;;;6BACK;MAAA,IAAAC,WAAA,GACkC,KAAKC,KADvC;QACCC,KADD,GAAAF,WAAA,CACCE,KADD;QACQC,KADR,GAAAH,WAAA,CACQG,KADR;QACeC,KADf,GAAAJ,WAAA,CACeI,KADf;QACyBC,IADzB,GAAAC,wBAAA,CAAAN,WAAA;MAAA,IAEOO,WAFP,GAEuBH,KAFvB,CAECI,IAFD;MAGP,OACEhB,KAAA,CAAAiB,aAAA,CAACd,IAAD,EAAAe,QAAA,KACML,IADN;QAEEF,KAAK,EAAE,CACLI,WAAW,GAAGI,MAAM,CAACH,IAAV,GAAiBG,MAAM,CAACC,KAD9B,EAELV,KAAK,IAAIS,MAAM,CAACT,KAFX,EAGLC,KAHK,CAFT;QAAAU,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;QAAA;MAAA,GADF;IAUD;;;EAdmBxB,KAAK,CAACyB,S;AAiB5B,IAAMN,MAAM,GAAGjB,UAAU,CAACwB,MAAX,CAAkB;EAC/BN,KAAK,EAAE;IACLO,eAAe,EAAE1B,KAAK,CAACI,KAAD,CAAL,CACduB,KADc,CACR,IADQ,EAEdC,GAFc,GAGdC,MAHc,EADZ;IAKLC,MAAM,EAAE7B,UAAU,CAAC8B;EALd,CADwB;EAQ/BhB,IAAI,EAAE;IACJW,eAAe,EAAE1B,KAAK,CAACK,KAAD,CAAL,CACdsB,KADc,CACR,IADQ,EAEdC,GAFc,GAGdC,MAHc,EADb;IAKJC,MAAM,EAAE7B,UAAU,CAAC8B;EALf,CARyB;EAe/BtB,KAAK,EAAE;IACLuB,UAAU,EAAE;EADP;AAfwB,CAAlB,CAAf;AAoBA,eAAe7B,SAAS,CAACG,OAAD,CAAxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}